from sched import scheduler
import re
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import logging

from mongoDB_database import get_all_users, add_new_user
from parser import get_cny_exchange_rate  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à –ø–∞—Ä—Å–µ—Ä

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–µ–ª–∞ –∫—É—Ä—Å–∞
LOWER_THRESHOLD = 15.00


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_chat_id = update.message.chat_id  # –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    add_new_user(user_chat_id)
    logger.info(f"User with chat_id {user_chat_id} has started the bot.")

    await update.message.reply_text(
        "Hello! I`m a bot for getting a CNY exchange rate. Use /rate to get the current rate"
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É—Ä—Å–∞
async def rate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        exchange_rate = get_cny_exchange_rate()  # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        await update.message.reply_text(exchange_rate)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    except Exception as e:
        logger.error(f"Error occurred: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def notify_users(message: str, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_ids = get_all_users()

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for user_id in user_ids:
        await context.bot.send_message(
            chat_id=user_id,
            text=message,
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def check_rate(context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        exchange_rate = get_cny_exchange_rate()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è buy_rate
        match = re.search(r"üíπBuy:\s*([\d.,]+)‚ÇΩ", exchange_rate)
        if match:
            buy_rate = float(
                match.group(1).replace(",", ".")
            )  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float

            if buy_rate < LOWER_THRESHOLD:
                message = f"üîî Alert! CNY Exchange Rate:\nüíπBuy: {buy_rate}‚ÇΩ, which is below {LOWER_THRESHOLD}‚ÇΩ!"
                await notify_users(
                    message, context
                )  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

        else:
            logger.error("Buy rate not found in exchange rate message.")
    except Exception as e:
        logger.error(f"Error in rate check: {e}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    TOKEN = "7566668017:AAHme__gqzBTOgdMMC1HKpAIH2aQKJplyxk"

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(TOKEN).build()
    scheduler = AsyncIOScheduler()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("rate", rate))

    scheduler.add_job(
        check_rate, "interval", minutes=2, args=[application]
    )  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
