from sched import scheduler
import re
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import logging

from mongoDB_database import (
    get_all_users,
    add_new_user,
    remove_user,
    update_user_alert_rate,
)
from parser import get_cny_exchange_rate  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à –ø–∞—Ä—Å–µ—Ä


# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–µ–ª–∞ –∫—É—Ä—Å–∞
LOWER_THRESHOLD = 14.00


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_chat_id = update.message.chat_id  # –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    add_new_user(user_chat_id)
    logger.info(f"User with chat_id {user_chat_id} has started the bot.")

    await update.message.reply_text(
        "Hello! I`m a bot for getting a CNY exchange rate.\nUse /rate to get the current rate"
    )


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_chat_id = update.message.chat_id  # –ø–æ–ª—É—á–∞–µ–º —á–∞—Ç –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    remove_user(user_chat_id)  # —É–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    logger.info(f"User with chat_id: {user_chat_id} has stopped the bot.")

    await update.message.reply_text(
        "You have been unsubcribed from the CNY exchange rate alerts.\nUse /start to get them again."
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É—Ä—Å–∞
async def rate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        exchange_rate = get_cny_exchange_rate()  # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        await update.message.reply_text(exchange_rate)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    except Exception as e:
        logger.error(f"Error occurred: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def notify_users(
    message: str, buy_rate: float, context: ContextTypes.DEFAULT_TYPE
):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å
    users = get_all_users()

    for user in users:
        user_id = user["chat_id"]
        last_alerted_rate = user.get("last_alerted_rate")

        if last_alerted_rate != buy_rate:  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—É—Ä—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            await context.bot.send_message(
                chat_id=user_id,
                text=message,
            )
            # –æ–±–Ω–æ–≤–ª—è–µ–º last_alerted_rate –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            update_user_alert_rate(user_id, buy_rate)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def check_rate(context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        exchange_rate = get_cny_exchange_rate()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è buy_rate
        match = re.search(r"üíπBuy:\s*([\d.,]+)‚ÇΩ", exchange_rate)
        if match:
            buy_rate = float(
                match.group(1).replace(",", ".")
            )  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float

            if buy_rate < LOWER_THRESHOLD:
                message = f"üîî Alert! CNY Exchange Rate:\nüíπBuy: {buy_rate}‚ÇΩ, which is below {LOWER_THRESHOLD}‚ÇΩ!"
                await notify_users(
                    message, buy_rate, context
                )  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏

        else:
            logger.error("Buy rate not found in exchange rate message.")
    except Exception as e:
        logger.error(f"Error in rate check: {e}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    scheduler = AsyncIOScheduler()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("rate", rate))
    application.add_handler(CommandHandler("stop", stop))

    scheduler.add_job(
        check_rate, "interval", minutes=60, args=[application]
    )  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
